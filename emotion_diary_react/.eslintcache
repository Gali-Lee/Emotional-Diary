[{"D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\App.js":"1","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\user\\Join.js":"2","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\diary\\OurDiary.js":"3","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\diary\\DiaryHome.js":"4","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\diary\\MyDiary.js":"5","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\Intro.js":"6","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\index.js":"7","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\user\\Login.js":"8","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\components\\Main.js":"9","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\components\\Footer.js":"10","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\components\\Header.js":"11","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\components\\Calendar.js":"12","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\diary\\MyDiaryDetail.js":"13","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\diary\\MyDiaryWrite.js":"14","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\user\\Modify.js":"15","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\diary\\MyDiaryModify.js":"16","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\store.js":"17"},{"size":1019,"mtime":1607830532166,"results":"18","hashOfConfig":"19"},{"size":5295,"mtime":1607851066580,"results":"20","hashOfConfig":"19"},{"size":2532,"mtime":1607833177866,"results":"21","hashOfConfig":"19"},{"size":559,"mtime":1607847108386,"results":"22","hashOfConfig":"19"},{"size":3570,"mtime":1607832807623,"results":"23","hashOfConfig":"19"},{"size":1138,"mtime":1607848143650,"results":"24","hashOfConfig":"19"},{"size":775,"mtime":1607830757535,"results":"25","hashOfConfig":"19"},{"size":4551,"mtime":1607853482614,"results":"26","hashOfConfig":"19"},{"size":1583,"mtime":1607852279432,"results":"27","hashOfConfig":"19"},{"size":457,"mtime":1607832990578,"results":"28","hashOfConfig":"19"},{"size":1909,"mtime":1607852989959,"results":"29","hashOfConfig":"19"},{"size":4278,"mtime":1607403449917,"results":"30","hashOfConfig":"31"},{"size":357,"mtime":1607759053587,"results":"32","hashOfConfig":"19"},{"size":3183,"mtime":1607851933492,"results":"33","hashOfConfig":"19"},{"size":3070,"mtime":1607852172058,"results":"34","hashOfConfig":"19"},{"size":1028,"mtime":1607668363937,"results":"35","hashOfConfig":"19"},{"size":518,"mtime":1607770078359,"results":"36","hashOfConfig":"19"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"1g1gqzf",{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"39"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},"4vt5ao",{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"39"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"39"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"39"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\App.js",[],["81","82"],"D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\user\\Join.js",["83","84"],"import React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst JoinStyle = styled.div`\r\n  display: grid;\r\n  height: 500px;\r\n  grid-template-columns: 50% 40%;\r\n  align-items: center;\r\n  margin: 10px 10px;\r\n`;\r\nconst LabelStyle = styled.div`\r\n  font-size: 23px;\r\n`;\r\nconst TitleStyle = styled.div`\r\n  font-size: 50px;\r\n  text-align: center;\r\n  margin: 20px 20px;\r\n`;\r\nconst IdBoxStyle = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 80% 20%;\r\n  grid-column-gap: 10px;\r\n`;\r\nconst ButtonBoxStyle = styled.div`\r\n  display: grid;\r\n  grid-template-columns: auto auto auto;\r\n  grid-column-gap: 10px;\r\n  justify-content: end;\r\n  margin: 10px;\r\n`;\r\nconst Join = () => {\r\n  const history = useHistory();\r\n\r\n  //user변수 선언\r\n  const [user, setUser] = useState({\r\n    id: '',\r\n    pw: '',\r\n    name: '',\r\n  });\r\n  //비밀번호 확인 할때 띄어줄 메세지\r\n  let pMessage = '8자 이상 적어주세요';\r\n\r\n  useEffect(() => {}, [pMessage]);\r\n  //input 데이터 들고오는 함수\r\n  function inputHandle(e) {\r\n    setUser((prevState) => {\r\n      // 함수형으로 쓰는 이유 : setstate 두번쓸때 값을 들고오기 우ㅐㅎ서\r\n      return {\r\n        ...prevState,\r\n        [e.target.name]: e.target.value,\r\n      };\r\n    });\r\n  }\r\n\r\n  function CheckHandle(e) {\r\n    setUser((prevState) => {\r\n      // 함수형으로 쓰는 이유 : setstate 두번쓸때 값을 들고오기 우ㅐㅎ서\r\n      return {\r\n        ...prevState,\r\n        [e.target.name]: e.target.value,\r\n      };\r\n    });\r\n  }\r\n\r\n  //초기화 하는 함수\r\n  function reset(e) {\r\n    e.preventDefault();\r\n    setUser({\r\n      id: '',\r\n      pw: '',\r\n      name: '',\r\n    });\r\n  }\r\n\r\n  //비밀번호와 비밀번호 확인이 같은지 다른지 판별해 주는 함수\r\n  function checkPw() {\r\n    console.log('check 들어옴');\r\n    if (user.pw === user.rePw) {\r\n      pMessage = '일치합니다';\r\n      console.log(pMessage);\r\n    } else {\r\n      pMessage = '다시 적어주세요!';\r\n      console.log(pMessage);\r\n    }\r\n  }\r\n\r\n  function checkId(e) {\r\n    e.preventDefault();\r\n\r\n    fetch('', {}).then().then();\r\n  }\r\n\r\n  //가입하는 함수\r\n  function submitJoin(e) {\r\n    e.preventDefault();\r\n    console.log(user);\r\n    fetch('http://10.100.102.31:8000/member/join', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json; charset=utf-8',\r\n      },\r\n      body: JSON.stringify(user),\r\n    })\r\n      .then((res) => res.text())\r\n      .then((res) => {\r\n        if (res === 'ok') {\r\n          alert('가입을 했습니다.');\r\n          history.push('/login');\r\n        } else {\r\n          alert('가입을 실패했습니다.');\r\n        }\r\n      });\r\n  }\r\n  return (\r\n    <div>\r\n      <TitleStyle>회원 가입</TitleStyle>\r\n      <JoinStyle>\r\n        <div>워드 클라우드</div>\r\n        <form>\r\n          <div class=\"form-group\">\r\n            <LabelStyle>아이디</LabelStyle>\r\n            <IdBoxStyle>\r\n              <input\r\n                class=\"form-control form-control-lg\"\r\n                type=\"text\"\r\n                name=\"id\"\r\n                value={user.id}\r\n                onChange={inputHandle}\r\n                placeholder=\"아이디를 입력하세요\"\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                class=\"btn btn-secondary btn-sm\"\r\n                onClick={checkId}\r\n              >\r\n                중복확인\r\n              </button>\r\n            </IdBoxStyle>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <LabelStyle>이름</LabelStyle>\r\n            <input\r\n              class=\"form-control form-control-lg\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={user.name}\r\n              onChange={inputHandle}\r\n              placeholder=\"이름 또는 닉네임을 입력하세요\"\r\n            />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <LabelStyle>비밀번호</LabelStyle>\r\n            <input\r\n              class=\"form-control form-control-lg\"\r\n              type=\"password\"\r\n              name=\"pw\"\r\n              value={user.pw}\r\n              onChange={inputHandle}\r\n              placeholder=\"비밀번호를 입력하세요\"\r\n            />\r\n          </div>\r\n          {/*  <div class=\"form-group\">\r\n            <LabelStyle>비밀번호 확인 </LabelStyle>\r\n            <input\r\n              class=\"form-control form-control-lg\"\r\n              type=\"password\"\r\n              name=\"rePw\"\r\n              value={user.rePw}\r\n              onChange={CheckHandle}\r\n              placeholder=\"한번 더 입력하세요.\"\r\n            />\r\n          </div>\r\n          <h3>확인 : {pMessage}</h3> */}\r\n          <ButtonBoxStyle>\r\n            <Link to=\"/login\">\r\n              <button type=\"button\" class=\"btn btn-secondary\" onClick={reset}>\r\n                취소\r\n              </button>\r\n            </Link>\r\n            <button\r\n              type=\"button\"\r\n              class=\"btn btn-secondary\"\r\n              onClick={submitJoin}\r\n            >\r\n              회원가입\r\n            </button>\r\n          </ButtonBoxStyle>\r\n        </form>\r\n      </JoinStyle>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Join;\r\n","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\diary\\OurDiary.js",["85"],"import FullCalendar from '@fullcalendar/react';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst OurDiaryStyle = styled.div`\r\n  display: grid;\r\n  max-width: 100%;\r\n  align-content: baseline;\r\n  grid-template-columns: 100%;\r\n  padding: 10px 10px;\r\n`;\r\nconst OurDiary = () => {\r\n  let eventGuid = 0;\r\n\r\n  function INITIAL_EVENTS() {\r\n    //최초 데이터 불러오는것\r\n  }\r\n\r\n  function renderEventContent() {\r\n    //잘모름\r\n  }\r\n\r\n  function handleEventClick() {\r\n    //클릭했을때 동작\r\n  }\r\n\r\n  function handleEvents() {\r\n    //\r\n  }\r\n  function createEventId() {\r\n    return String(eventGuid++);\r\n  }\r\n  function handleDateSelect(selectInfo) {\r\n    let title = prompt('Please enter a new title for your event');\r\n    let calendarApi = selectInfo.view.calendar;\r\n\r\n    calendarApi.unselect(); // clear date selection\r\n\r\n    if (title) {\r\n      calendarApi.addEvent({\r\n        id: createEventId(),\r\n        title,\r\n        start: selectInfo.startStr,\r\n        end: selectInfo.endStr,\r\n        allDay: selectInfo.allDay,\r\n      });\r\n    }\r\n  }\r\n  return (\r\n    <OurDiaryStyle>\r\n      <h1>교환 다이어리!</h1>\r\n      <br />\r\n      {/*       <MyCalendar /> */}\r\n      <FullCalendar\r\n        plugins={[timeGridPlugin, interactionPlugin, bootstrapPlugin]}\r\n        headerToolbar={{\r\n          left: 'prev',\r\n          center: 'title',\r\n          right: 'next',\r\n        }}\r\n        themeSystem=\"bootstrap\"\r\n        contentHeight=\"auto\"\r\n        handleWindowResize={true}\r\n        locale=\"ko\"\r\n        initialView=\"timeGridWeek\"\r\n        editable={true}\r\n        selectable={true}\r\n        selectMirror={true}\r\n        dayMaxEvents={true}\r\n        weekends={true}\r\n        //initialEvents={boards} // alternatively, use the `events` setting to fetch from a feed\r\n        //vents={boards}\r\n        select={handleDateSelect}\r\n        eventContent={renderEventContent} // custom render function\r\n        eventClick={handleEventClick}\r\n        eventsSet={handleEvents} // called after events are initialized/added/changed/removed\r\n        /* you can update a remote database when these fire:\r\n                   eventAdd={function(){}}\r\n                   eventChange={function(){}}\r\n                   eventRemove={function(){}}\r\n                   */\r\n      />\r\n    </OurDiaryStyle>\r\n  );\r\n};\r\n\r\nexport default OurDiary;\r\n","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\diary\\DiaryHome.js",[],"D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\diary\\MyDiary.js",["86","87","88","89"],"import FullCalendar from '@fullcalendar/react';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\r\nimport React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst MyDiaryStyle = styled.div`\r\n  display: grid;\r\n  max-width: 100%;\r\n  align-content: baseline;\r\n  grid-template-columns: 100%;\r\n  padding: 10px 10px;\r\n`;\r\n\r\nconst MyDiary = () => {\r\n  const [boards, setBoards] = useState([]);\r\n  let eventDb = [\r\n    {\r\n      id: 1,\r\n      title: 'All-day event',\r\n      start: '2020-12-02',\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Timed event',\r\n      start: '2020-12-03',\r\n    },\r\n    {\r\n      id: 3,\r\n      title: '내가 생성',\r\n      start: '2020-12-04',\r\n    },\r\n  ];\r\n  useEffect(() => {\r\n    fetch('http://10.100.102.31:8000/board/my', {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: localStorage.getItem('Authorization'),\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        console.log('res.bno', res.bno);\r\n\r\n        setBoards({\r\n          id: res.bno,\r\n          title: res.title,\r\n          start: res.createTime,\r\n        });\r\n        //setBoards(res);\r\n        console.log('aaa', boards);\r\n      });\r\n  }, []);\r\n  const [selectDate, setSelectDate] = useState({\r\n    start: '',\r\n    end: '',\r\n    allDay: '',\r\n  });\r\n\r\n  function INITIAL_EVENTS() {\r\n    //최초 데이터 불러오는것\r\n  }\r\n\r\n  function renderEventContent() {\r\n    //잘모름\r\n  }\r\n\r\n  function handleEventClick() {\r\n    //클릭했을때 동작\r\n  }\r\n\r\n  function handleEvents() {}\r\n\r\n  // 자체 bno\r\n  /* function createEventId() {\r\n    return String(eventGuid++);\r\n  } */\r\n  function handleDateSelect(selectInfo) {\r\n    console.log(boards);\r\n    //let title = prompt('Please enter a new title for your event');\r\n    let calendarApi = selectInfo.view.calendar;\r\n    setSelectDate({\r\n      start: selectInfo.startStr,\r\n      end: selectInfo.endStr,\r\n      allDay: selectInfo.allDay,\r\n    });\r\n\r\n    calendarApi.unselect(); // clear date selection\r\n\r\n    /* if (title) {\r\n      calendarApi.addEvent({\r\n        id: createEventId(),\r\n        title,\r\n        start: selectInfo.startStr,\r\n        end: selectInfo.endStr,\r\n        allDay: selectInfo.allDay,\r\n      });\r\n    } */\r\n  }\r\n  return (\r\n    <MyDiaryStyle>\r\n      <br />\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin, interactionPlugin, bootstrapPlugin]}\r\n        headerToolbar={{\r\n          left: 'prev',\r\n          center: 'title',\r\n          right: 'next',\r\n        }}\r\n        themeSystem=\"bootstrap\"\r\n        contentHeight=\"auto\"\r\n        handleWindowResize={true}\r\n        locale=\"ko\"\r\n        initialView=\"dayGridMonth\"\r\n        editable={true}\r\n        selectable={true}\r\n        selectMirror={true}\r\n        dayMaxEvents={true}\r\n        weekends={true}\r\n        //initialEvents={boards} // alternatively, use the `events` setting to fetch from a feed\r\n        events={boards}\r\n        select={handleDateSelect}\r\n        eventContent={renderEventContent} // custom render function\r\n        eventClick={handleEventClick}\r\n        eventsSet={handleEvents} // called after events are initialized/added/changed/removed\r\n        /* you can update a remote database when these fire:\r\n                   eventAdd={function(){}}\r\n                   eventChange={function(){}}\r\n                   eventRemove={function(){}}\r\n                   */\r\n      />\r\n    </MyDiaryStyle>\r\n  );\r\n};\r\n\r\nexport default MyDiary;\r\n","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\Intro.js",[],"D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\index.js",[],"D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\user\\Login.js",[],"D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\components\\Main.js",[],"D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\components\\Footer.js",[],"D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\components\\Header.js",[],"D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\components\\Calendar.js",["90","91"],"import React from 'react';\r\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md';\r\nimport styled from 'styled-components';\r\nimport moment from 'moment';\r\n\r\nconst CalendarStyle = styled.div`\r\n  user-select: none;\r\n`;\r\nconst HeadStyle = styled(CalendarStyle)`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 12px 8px;\r\n`;\r\nconst ButtonStyle = styled.button`\r\n  cursor: pointer;\r\n  outline: none;\r\n  display: inline-flex;\r\n  background: transparent;\r\n  border: none;\r\n  font-size: 20pt;\r\n  padding: 4px;\r\n  border-radius: 4px;\r\n  &:hover {\r\n    background-color: rgba(gray, 0.1);\r\n  }\r\n  &:active {\r\n    background-color: rgba(gray, 0.2);\r\n  }\r\n`;\r\nconst TitleStyle = styled.span`\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n  padding: 4px 12px;\r\n  &:hover {\r\n    background-color: rgba(gray, 0.1);\r\n  }\r\n  &:active {\r\n    background-color: rgba(gray, 0.2);\r\n  }\r\n`;\r\nconst BodyStyle = styled(CalendarStyle)``;\r\nconst RowStyle = styled(CalendarStyle)`\r\n  display: flex;\r\n  cursor: pointer;\r\n  &:first-child {\r\n    cursor: initial;\r\n    .box {\r\n      font-weight: bold;\r\n    }\r\n    .box:hover > span.text {\r\n      background-color: white;\r\n    }\r\n  }\r\n`;\r\nconst BoxStyle = styled(RowStyle)`\r\n  position: relative;\r\n  display: inline-flex;\r\n  width: calc(100% / 7);\r\n  height: 0;\r\n  padding-bottom: calc(100% / 7);\r\n  font-size: 12pt;\r\n  &:first-child {\r\n    color: red;\r\n  }\r\n  &:last-child {\r\n    color: #588dff;\r\n  }\r\n  &.grayed {\r\n    color: gray;\r\n  }\r\n  &:hover {\r\n    span.text {\r\n      background-color: rgba(#588dff, 0.1);\r\n    }\r\n  }\r\n  &.selected {\r\n    span.text {\r\n      background-color: #588dff;\r\n      color: white;\r\n    }\r\n  }\r\n`;\r\nconst TextStyle = styled.span`\r\n  border-radius: 100%;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 60%;\r\n  height: 60%;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n`;\r\nconst Calendar = () => {\r\n  //달력 날짜 만드는 함수\r\n  function generate() {\r\n    const today = moment(); // moment를 이용해 현재 한국 시간을 가져옴\r\n    const startWeek = today.clone().startOf('month').week();\r\n    const endWeek =\r\n      today.clone().endOf('month').week() === 1\r\n        ? 53\r\n        : today.clone().endOf('month').week();\r\n    let calendar = [];\r\n    for (let week = startWeek; week <= endWeek; week++) {\r\n      calendar.push(\r\n        <RowStyle key={week}>\r\n          {Array(7)\r\n            .fill(0)\r\n            .map((n, i) => {\r\n              let current = today\r\n                .clone()\r\n                .week(week)\r\n                .startOf('week')\r\n                .add(n + i, 'day');\r\n              let isSelected =\r\n                today.format('YYYYMMDD') === current.format('YYYYMMDD')\r\n                  ? 'selected'\r\n                  : '';\r\n              let isGrayed =\r\n                current.format('MM') === today.format('MM') ? '' : 'grayed';\r\n              return (\r\n                <BoxStyle isSelected isGrayed key={i}>\r\n                  <TextStyle>{current.format('D')}</TextStyle>\r\n                </BoxStyle>\r\n              );\r\n            })}\r\n        </RowStyle>,\r\n      );\r\n    }\r\n    return calendar;\r\n  }\r\n  return (\r\n    <CalendarStyle>\r\n      <HeadStyle>\r\n        <ButtonStyle>\r\n          <MdChevronLeft />\r\n        </ButtonStyle>\r\n        <TitleStyle>{moment().format('MMMM YYYY')}</TitleStyle>\r\n        <ButtonStyle>\r\n          <MdChevronRight />\r\n        </ButtonStyle>\r\n      </HeadStyle>\r\n      <BodyStyle>\r\n        <RowStyle>\r\n          <BoxStyle>\r\n            <TextStyle>SUN</TextStyle>\r\n          </BoxStyle>\r\n          <BoxStyle>\r\n            <TextStyle>MON</TextStyle>\r\n          </BoxStyle>\r\n          <BoxStyle>\r\n            <TextStyle>TUE</TextStyle>\r\n          </BoxStyle>\r\n          <BoxStyle>\r\n            <TextStyle>WED</TextStyle>\r\n          </BoxStyle>\r\n          <BoxStyle>\r\n            <TextStyle>THU</TextStyle>\r\n          </BoxStyle>\r\n          <BoxStyle>\r\n            <TextStyle>FRI</TextStyle>\r\n          </BoxStyle>\r\n          <BoxStyle>\r\n            <TextStyle>SAT</TextStyle>\r\n          </BoxStyle>\r\n        </RowStyle>\r\n        {generate()}\r\n      </BodyStyle>\r\n    </CalendarStyle>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n",["92","93"],"D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\diary\\MyDiaryDetail.js",["94","95","96"],"import React, { useEffect, useState } from 'react';\r\n\r\nconst MyDiaryDetail = () => {\r\n  //\r\n  const [diary, setDiary] = useState({\r\n    id: '',\r\n    title: '',\r\n    content: '',\r\n    image1: '',\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div>title</div>\r\n      <div>image</div>\r\n      <div>content</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyDiaryDetail;\r\n","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\diary\\MyDiaryWrite.js",["97","98"],"import React, { useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nconst ButtonBoxStyle = styled.div`\r\n  display: grid;\r\n  grid-template-columns: auto auto auto;\r\n  grid-column-gap: 10px;\r\n  justify-content: end;\r\n  margin: 10px;\r\n`;\r\nconst MyDiaryWriteStyle = styled.div`\r\n  display: grid;\r\n  align-content: center;\r\n  grid-template-columns: 100%;\r\n  padding: 10px 10px;\r\n  border: 1px solid #003458;\r\n`;\r\nconst MyDiaryFormStyle = styled.form`\r\n  display: grid;\r\n  align-content: center;\r\n  grid-template-columns: 100%;\r\n  padding: 10px 10px;\r\n  border: 1px solid #003458;\r\n`;\r\nconst MyDiaryWrite = () => {\r\n  const history = useHistory();\r\n\r\n  const [diary, setDiary] = useState({\r\n    id: '',\r\n    title: '',\r\n    content: '',\r\n    image1: '',\r\n  });\r\n  const uploadImg = async (e) => {\r\n    const file = e.target.files[0];\r\n    setDiary((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        [e.target.name]: file,\r\n      };\r\n    });\r\n  };\r\n  function inputHandle(e) {\r\n    setDiary((prevState) => {\r\n      // 함수형으로 쓰는 이유 : setstate 두번쓸때 값을 들고오기 우ㅐㅎ서\r\n      return {\r\n        ...prevState,\r\n        [e.target.name]: e.target.value,\r\n      };\r\n    });\r\n  }\r\n  function submitWrite(e) {\r\n    e.preventDefault();\r\n\r\n    console.log('submitPost() 실행');\r\n\r\n    //let form = document.getElementById('form');\r\n    //const formData = new FormData(form);\r\n\r\n    /* if (board3.image1 === '' && board3.image2 === '') {\r\n      alert('사진을 한장이상 업로드 해주세요!');\r\n    } else {\r\n      console.log('fetch 실행');\r\n      fetch('http://localhost:8000/board3/write', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: localStorage.getItem('Authorization'),\r\n        },\r\n        body: formData,\r\n      })\r\n        .then((res) => res.text())\r\n        .then((res) => {\r\n          if (res === 'ok') {\r\n            alert('글이 등록되었습니다.');\r\n            //history.push(\"/board3\");\r\n          } else {\r\n          }\r\n        });\r\n    } */\r\n  }\r\n  return (\r\n    <MyDiaryWriteStyle>\r\n      <form>\r\n        <label>제목</label>\r\n        <input\r\n          class=\"form-control form-control-lg\"\r\n          type=\"text\"\r\n          name=\"title\"\r\n          value={diary.title}\r\n          onChange={inputHandle}\r\n        />\r\n        <label>내용</label>\r\n        <textarea\r\n          class=\"form-control form-control-lg\"\r\n          name=\"content\"\r\n          id=\"exampleTextarea\"\r\n          rows=\"3\"\r\n        >\r\n          {diary.content}\r\n        </textarea>\r\n        <label>사진</label>\r\n        <input\r\n          class=\"form-control-file\"\r\n          type=\"file\"\r\n          name=\"image\"\r\n          value={diary.image1}\r\n          onChange={uploadImg}\r\n        />\r\n        <ButtonBoxStyle>\r\n          <button class=\"btn btn-secondary\" onClick={submitWrite}>\r\n            작성\r\n          </button>\r\n          <Link to=\"/diary\">\r\n            <button class=\"btn btn-secondary\">취소</button>\r\n          </Link>\r\n        </ButtonBoxStyle>\r\n      </form>\r\n    </MyDiaryWriteStyle>\r\n  );\r\n};\r\n\r\nexport default MyDiaryWrite;\r\n","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\user\\Modify.js",["99"],"import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ModifyStyle = styled.div`\r\n  display: grid;\r\n  grid-template-columns: auto;\r\n  width: 700px;\r\n  padding: 50px 10px 10px 10px;\r\n  // border: 1px solid #003458;\r\n`;\r\nconst LabelStyle = styled.div`\r\n  font-size: 23px;\r\n`;\r\n\r\nconst ButtonBoxStyle = styled.div`\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  grid-column-gap: 10px;\r\n  justify-content: end;\r\n  margin: 10px;\r\n`;\r\nconst Modify = (props) => {\r\n  const id = props.match.params.id;\r\n  const [user, setUser] = useState({\r\n    id: '',\r\n    name: '',\r\n    pw: '',\r\n  });\r\n  useEffect(() => {\r\n    fetch('http://10.100.102.31:8000/member/get/' + id, {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: localStorage.getItem('Authorization'),\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setUser(res);\r\n        console.log('res', res);\r\n        console.log('user', user);\r\n      });\r\n  }, []);\r\n  function inputHandle(e) {\r\n    setUser({\r\n      ...user,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  }\r\n\r\n  function reset(e) {\r\n    e.preventDefault();\r\n    setUser({\r\n      userId: '',\r\n      password: '',\r\n    });\r\n  }\r\n  function submitModify(e) {\r\n    e.preventDefault();\r\n\r\n    fetch().then().then();\r\n  }\r\n\r\n  return (\r\n    <ModifyStyle>\r\n      <form>\r\n        회원 정보를 수정 해주세요\r\n        <div class=\"form-group\">\r\n          <LabelStyle>userId</LabelStyle>\r\n          <input\r\n            class=\"form-control form-control-lg\"\r\n            type=\"text\"\r\n            name=\"userId\"\r\n            onChange={inputHandle}\r\n            value={user.id}\r\n            readOnly={true}\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <LabelStyle>userName</LabelStyle>\r\n          <input\r\n            class=\"form-control form-control-lg\"\r\n            type=\"text\"\r\n            name=\"userName\"\r\n            onChange={inputHandle}\r\n            value={user.name}\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <LabelStyle>pw</LabelStyle>\r\n          <input\r\n            class=\"form-control form-control-lg\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            onChange={inputHandle}\r\n            value={user.pw}\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <LabelStyle>pw 확인 </LabelStyle>\r\n          <input\r\n            class=\"form-control form-control-lg\"\r\n            type=\"password\"\r\n            name=\"rePassword\"\r\n            value={user.rePassword}\r\n            onChange={inputHandle}\r\n          />\r\n        </div>\r\n        <ButtonBoxStyle>\r\n          <button type=\"button\" class=\"btn btn-secondary\" onClick={reset}>\r\n            취소\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-secondary\"\r\n            onClick={submitModify}\r\n          >\r\n            수정\r\n          </button>\r\n        </ButtonBoxStyle>\r\n      </form>\r\n    </ModifyStyle>\r\n  );\r\n};\r\n\r\nexport default Modify;\r\n","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\pages\\diary\\MyDiaryModify.js",["100","101","102"],"import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst MyDiaryModify = () => {\r\n  const history = useHistory();\r\n\r\n  const [diary, setDiary] = useState({\r\n    id: '',\r\n    title: '',\r\n    content: '',\r\n    image1: '',\r\n  });\r\n  const uploadImg = async (e) => {\r\n    const file = e.target.files[0];\r\n    setDiary((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        [e.target.name]: file,\r\n      };\r\n    });\r\n  };\r\n  function inputHandle(e) {\r\n    setDiary((prevState) => {\r\n      // 함수형으로 쓰는 이유 : setstate 두번쓸때 값을 들고오기 우ㅐㅎ서\r\n      return {\r\n        ...prevState,\r\n        [e.target.name]: e.target.value,\r\n      };\r\n    });\r\n  }\r\n  return (\r\n    <div>\r\n      <form>\r\n        <input type=\"text\" name=\"title\" value={diary.title} />\r\n        <textarea name=\"content\">{diary.content}</textarea>\r\n        <input type=\"file\" name=\"image\" value={diary.image1} />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyDiaryModify;\r\n","D:\\workspace\\team_project\\Emotional-Diary\\emotion_diary_react\\src\\store.js",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":56,"column":12,"nodeType":"109","messageId":"110","endLine":56,"endColumn":23},{"ruleId":"107","severity":1,"message":"111","line":77,"column":12,"nodeType":"109","messageId":"110","endLine":77,"endColumn":19},{"ruleId":"107","severity":1,"message":"112","line":18,"column":12,"nodeType":"109","messageId":"110","endLine":18,"endColumn":26},{"ruleId":"107","severity":1,"message":"113","line":18,"column":7,"nodeType":"109","messageId":"110","endLine":18,"endColumn":14},{"ruleId":"114","severity":1,"message":"115","line":54,"column":6,"nodeType":"116","endLine":54,"endColumn":8,"suggestions":"117"},{"ruleId":"107","severity":1,"message":"118","line":55,"column":10,"nodeType":"109","messageId":"110","endLine":55,"endColumn":20},{"ruleId":"107","severity":1,"message":"112","line":61,"column":12,"nodeType":"109","messageId":"110","endLine":61,"endColumn":26},{"ruleId":"107","severity":1,"message":"119","line":117,"column":19,"nodeType":"109","messageId":"110","endLine":117,"endColumn":29},{"ruleId":"107","severity":1,"message":"120","line":121,"column":19,"nodeType":"109","messageId":"110","endLine":121,"endColumn":27},{"ruleId":"103","replacedBy":"121"},{"ruleId":"105","replacedBy":"122"},{"ruleId":"107","severity":1,"message":"123","line":1,"column":17,"nodeType":"109","messageId":"110","endLine":1,"endColumn":26},{"ruleId":"107","severity":1,"message":"124","line":5,"column":10,"nodeType":"109","messageId":"110","endLine":5,"endColumn":15},{"ruleId":"107","severity":1,"message":"125","line":5,"column":17,"nodeType":"109","messageId":"110","endLine":5,"endColumn":25},{"ruleId":"107","severity":1,"message":"126","line":18,"column":7,"nodeType":"109","messageId":"110","endLine":18,"endColumn":23},{"ruleId":"107","severity":1,"message":"127","line":26,"column":9,"nodeType":"109","messageId":"110","endLine":26,"endColumn":16},{"ruleId":"114","severity":1,"message":"128","line":42,"column":6,"nodeType":"116","endLine":42,"endColumn":8,"suggestions":"129"},{"ruleId":"107","severity":1,"message":"127","line":5,"column":9,"nodeType":"109","messageId":"110","endLine":5,"endColumn":16},{"ruleId":"107","severity":1,"message":"130","line":13,"column":9,"nodeType":"109","messageId":"110","endLine":13,"endColumn":18},{"ruleId":"107","severity":1,"message":"131","line":22,"column":12,"nodeType":"109","messageId":"110","endLine":22,"endColumn":23},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'CheckHandle' is defined but never used.","Identifier","unusedVar","'checkPw' is defined but never used.","'INITIAL_EVENTS' is defined but never used.","'eventDb' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'boards'. Either include it or remove the dependency array.","ArrayExpression",["134"],"'selectDate' is assigned a value but never used.","'isSelected' is assigned a value but never used.","'isGrayed' is assigned a value but never used.",["132"],["133"],"'useEffect' is defined but never used.","'diary' is assigned a value but never used.","'setDiary' is assigned a value but never used.","'MyDiaryFormStyle' is assigned a value but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id' and 'user'. Either include them or remove the dependency array.",["135"],"'uploadImg' is assigned a value but never used.","'inputHandle' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},"Update the dependencies array to be: [boards]",{"range":"140","text":"141"},"Update the dependencies array to be: [id, user]",{"range":"142","text":"143"},[1319,1321],"[boards]",[1007,1009],"[id, user]"]